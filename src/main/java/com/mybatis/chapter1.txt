第一章 MyBatis简介
1.1 传统的JDBC编程（Java Data Base Connectivity）

代码清单1-1
JdbcExample.java
    description:从mysql数据库中查询一个角色的名称，假设我们知道角色编号为1
    根据JdbcExample可以看出使用原始的jdbc会使得操作变得极为繁琐
1.2 ORM模型   （Object Relational Mapping）
    POJO    数据库的表和简单的java对象
1.3 Hibernate
    sun起初推出的JavaEE服务端组件模型（EJB），但是配置复杂，很快淘汰，随后另一个框架应运而生，Hibernate。
    稍微总结下Hibernate的缺点：
        1，全表映射带来不便，比如更新时，需要发送所有字段
        2，无法根据不同的条件组装不同的SQL
        3，对多表关联和复杂SQL查询支持较差，需要自己写SQL，返回后需要自己将数据组长为POJO
        4，不能有效支持存储过程
        5，虽然有HQL，但是性能较差。大型互联网往往需要优化SQL，返回后，需要自己将数据组装为POJO。
    经常用，这里就不再举栗子
1.4 MyBatis 半自动映射的框架
    因为需要手工匹配提供的POJO、SQL和映射关系，而全表的Hibernate只需要提供POJO和映射关系便可。
    映射文件包括三个部分：
        SQL
        映射规则
        POJO
1.5 什么时候用MyBatis
        hibernate缺点：多表关联复杂SQL，数据系统权限限制，根据条件变化的SQL。存储过程等场景使用Hibernate十分不方便，而性能
    又难以通过SQl优化。所以注定Hibernate只适用于在场景不太复杂，要求性能不太苛刻的时候使用。
        如果需要一个灵活的、可以动态生成映射关系的框架，那么MyBatis确实是一个最好的选择。几乎可以代理JDBC，拥有动态列、动态
    表名，存储过程都支持，同时提供了简易的缓存、日志、级联。但是它的缺陷是需要你提供映射规则和SQL，所以它的开发工作量比Hibernate
    稍微大一些。
        MyBatis灵活度高、可优化、易维护等。







